@{
    /* */
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD Page";

    var productName = Request.Form[""];
    var supplierID = Request.Form[""];
    var categoryID = Request.Form[""];
    var quantityPerUnit = Request.Form[""];
    var unitPrice = Request.Form[""];
    var unitsInStock = Request.Form[""];
    var unitsOnOrder = Request.Form[""];
    var reorderLevel = Request.Form[""];
    var theButton = Request.Form["FormButton"];

    //obtain two lists : SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierQuery = @"SELECT SupplierID, CompanyName
                        FROM Suppliers 
                        Order by CompanyName";
    var categoryQuery = @"SELECT CategoryID, CategoryName
                        FROM Categories 
                        Order by CategoryName";
    var supplierList = db.Query(supplierQuery);
    var categoryList = db.Query(categoryQuery);

    //these validator controls execute on the client and server sides
    Validation.Add("ProductName",
        Validator.Required("Product Name is requried"),
        Validator.StringLength(10,1,"Product Name is limited to 160 characters"));
    Validation.Add("QuantityPerUnit",
       Validator.StringLength(20, 0, "Quantity Per Unit is limited to 20 characters"));
    Validation.Add("UnitPrice",
                Validator.Range(0.0, double.MaxValue,"Price must be a dollar amount 0.00 or greater"));
    Validation.Add("UnitsInStock",
                 Validator.Range(0.0, Int16.MaxValue, "Units in stock must be 0 or greater"));
    Validation.Add("UnitsOnOrder",
                Validator.Range(0.0, Int16.MaxValue, "Units On Order must be 0 or greater"));
    Validation.Add("ReorderLevel",
                Validator.Range(0.0, Int16.MaxValue, "Reorder level must be 0 or greater"));
}

@section banner{
    <h1>DataBase: CRUD Product </h1>
}
@if (IsPost)
//when
{
    if (theButton.Equals("Clear"))
    {
        <p class="text-center well">You cleared the current input</p>
    }
    else
    {


        productName = Request.Form["ProductName"];
        supplierID = Request.Form["SupplierList"];
        categoryID = Request.Form["CategoryList"];
        quantityPerUnit = Request.Form["QuantityPerUnit"];
        unitPrice = Request.Form["UnitPrice"];
        unitsInStock = Request.Form["UnitsInStock"];
        unitsOnOrder = Request.Form["UnitsOnOrder"];
        reorderLevel = Request.Form["ReorderLevel"];


        //  data is validated
        if (Validation.IsValid())
        {
            if (supplierID.Equals("0"))
            {
                <p>select a supplier for the product</p>
            }
            //you may b required to do some validating using logic
            //we will assume that supplier and category must be chosen

            //you should (and are expected) to perform
            try
            {

                var insertCommand = @"INSERT INTO Products (ProductName,
                                          SupplierID,
                                          CategoryID,
                                          QuantityPerUnit,
                                          UnitPrice,
                                           UnitsInStock,
                                           UnitsOnOrder,
                                           ReorderLevel,
                                           Discontinued)
                                          VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8)";
                db.Execute(insertCommand, productName,
                string.IsNullOrEmpty(supplierID) ? null : supplierID,
                string.IsNullOrEmpty(categoryID) ? null : categoryID,
                string.IsNullOrEmpty(quantityPerUnit) ? null : quantityPerUnit,
                string.IsNullOrEmpty(unitPrice) ? null : unitPrice,
                string.IsNullOrEmpty(unitsInStock) ? null : unitsInStock,
                string.IsNullOrEmpty(unitsOnOrder) ? null : unitsOnOrder,
                string.IsNullOrEmpty(reorderLevel) ? null : reorderLevel,
                0);
                //there are only two possibilities for an insert
                // a) works
                // b) aborts (handle by try/catch)
            <p class="text-center well" style="color:green">Product has been added.</p>
            

        }
        catch (Exception ex)
        {
            <p class="text-center well" style="color:firebrick">@ex.Message</p>
            }
        }
    }
}
<!--Step 2 of validation is to set up the display control
    a) you can set up a single place general display
    b) place a validation display control beside the field in question
    -->
@Html.ValidationSummary();
<form id="theForm" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            
            <label for="ProductName">Name:</label><br />
            <label for="SupplierID">Supplier:</label><br />
            <label for="CategoryID">Category:</label><br />
            <label for="QuantityPerUnit">Qty/Unit:</label><br />
            <label for="UnitPrice">Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">QoO:</label><br />
            <label for="ReorderLevel">RoL:</label><br />

        </div>
        <div class="col-md-6 text-left">

            <input type="text" id="ProductName" name="ProductName" value="@productName" /> <br />

            <select id="SupplierList" name="SupplierList">
            &nbsp; @Html.ValidationSummary("ProductName")
                <option value="0">select supplier</option>
                @foreach (var item in supplierList)
                {
                    //if you want a prompt on the list then add an option

                    //supplierID is the local string variable
                    //item.SupplierID is the integer value in the collection

                    {
                        if (supplierID == item.SupplierID.ToString())
                        {
                            <option value="@item.SupplierID" selected>
                                @item.CompanyName
                            </option>
                        }
                        else
                        {
                            <option value="@item.SupplierID">
                                @item.CompanyName
                            </option>
                        }


                    }
                }
            </select><br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category</option>
                @foreach (var item in categoryList)
                {
                    //if you want a prompt on the list then add an option

                    //supplierID is the local string variable
                    //item.SupplierID is the integer value in the collection

                    {
                        if (categoryID == item.categoryID.ToString())
                        {
                            <option value="@item.categoryID" selected>
                                @item.CategoryName
                            </option>
                        }
                        else
                        {
                            <option value="@item.CategoryID">
                                @item.CategoryName
                            </option>
                        }


                    }
                }
            </select><br />

            <!-- <input type="text" id="CategoryID" name="CategoryID" value="@categoryID" /><br />-->
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit" value="@quantityPerUnit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice" value="@unitPrice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock" value="@unitsInStock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder" value="@unitsOnOrder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel" value="@reorderLevel" /><br />
            <br />

        </div>
    </div>
    <div class="row">
        <div class="text-center">
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn" value="Clear" />
        </div>
    </div>
</form>
