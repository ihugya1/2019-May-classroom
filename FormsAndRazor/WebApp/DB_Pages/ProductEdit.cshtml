@{
    Page.Title = "Product Edit";

    Layout = "~/_Layout.cshtml";


    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("ProductSearch.cshtml");
    }
    var productid = Request.Form["ProductID"];
    var productname = Request.Form["ProductName"];
    var supplierid = Request.Form["SupplierList"];
    var categoryid = Request.Form["CategoryList"];
    var quantityperunit = Request.Form["QuantityPerUnit"];
    var unitprice = Request.Form["UnitPrice"];
    var unitsinstock = Request.Form["UnitsInStock"];
    var unitsonorder = Request.Form["UnitsOnOrder"];
    var reorderlevel = Request.Form["ReorderLevel"];
    var discontinued = Request.Form["Discontinued"];
    //capture which button was pressed
    var thebutton = Request.Form["theButton"];

    if (IsPost)
    {
        

        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        if (discontinued == null)
        {
            discontinued = "0";
        }
        else
        {
            discontinued = "1";
        }
    }
    else
    {
        productid = pid;
        discontinued = "0";
    }
    var db = Database.Open("NWDB");
    var supplierStatement = "SELECT SupplierID, CompanyName "
                       + "FROM Suppliers "
                       + "ORDER BY CompanyName";
    var querySuppliers = db.Query(supplierStatement);
    var categoryStatement = "SELECT CategoryID, CategoryName "
                       + "FROM Categories "
                       + "ORDER BY CategoryName";
    var queryCategories = db.Query(categoryStatement);
    var queryStatement = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued "
                        + "FROM Products "
                        + "WHERE ProductID = @0";
    var queryProducts = db.QuerySingle(queryStatement, pid);
}



@section banner{
    <h1>Product Edit - Update and Delete</h1>
}
@if (IsPost)
{//which button did the user press
    if (thebutton.Equals("cancel"))
    {
        <p>Action cancelled<a href="ProductSearch.cshtml">  Back to Product Search</a></p>
    }
    else if (thebutton.Equals("delete"))
    {
        //(ensure the P-Key value is physically present)
        //if present
        //  create delete command (physical) or update command (logical)
        //  execute
        //  check results
        //  no changes : specific no change msg
        //  yes changes : specific yes change msg
        if (string.IsNullOrEmpty(productid))
        {
            <p><span style="color:lawngreen">No product selected. Return to search for another product.</span> <a href="ProductSearch.cshtml">  Back to Product Search</a></p>
        }
        else
        {
            try
                //products are a logical delete

            {   //logical delete
                var updatecommand = @"UPDATE Products
SET Discontinued = @0
WHERE ProductID = @1";
                var rowsAffected = db.Execute(updatecommand,
                 discontinued, productid);
                //or
                //
                //phsyical delete
                //                var deletecommand = @"DELETE Products
                //WHERE ProductID = @0";
                //                var rowsAffected = db.Execute(updatecommand,
                //   discontinued, productid);

                if (rowsAffected == 0)
                {
                    productid = "";
                    <p><span style="color:firebrick">Product was not discontinued. Product not found. Return to search for another product</span> <a href="ProductSearch.cshtml">  Back to Product Search</a></p>
                }
                else
                {
                    <p><span style="color:green">@productname is discontinued.</span></p>

                    //optionally for a physical delete 
                    //you could set all the fields to empty
                    productid = "";
                    productname = "";
                    supplierid = "";
                    categoryid = "";
                    quantityperunit = "";
                    unitprice = "";
                    unitsinstock = "";
                    unitsonorder = "";
                    reorderlevel = "";
                    discontinued = "0";

                }
            }
            catch (Exception ex)
            {


                <p><span style="color:firebrick">@ex.Message</span></p>
            }


        }
    }
    else
    {

        //validation (ensure the P-Key value is physically present)
        //if good data
        //  create update command
        //  execute
        //  check results
        //  no changes : specific no change msg
        //  yes changes : specific yes change msg
        if (string.IsNullOrEmpty(productid))
        {
            <p><span style="color:lawngreen">No product selected. Return to search for another product.</span> <a href="ProductSearch.cshtml">  Back to Product Search</a></p>
        }
        else
        {
            try
            {
                var updatecommand = @"UPDATE Products
SET ProductName = @0,
    SupplierID = @1,
    CategoryID = @2,
    QuantityPerUnit = @3,
    UnitPrice = @4,
    UnitsInStock = @5,
    UnitsOnOrder = @6,
    ReorderLevel = @7,
    Discontinued = @8
WHERE ProductID = @9";
                var rowsAffected = db.Execute(updatecommand, productname,
                 string.IsNullOrEmpty(supplierid) ? null : supplierid,
                 string.IsNullOrEmpty(categoryid) ? null : categoryid,
                 string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                 string.IsNullOrEmpty(unitprice) ? null : unitprice,
                 string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                 string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                 string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                 discontinued, productid);
                if (rowsAffected == 0)
                {
                    productid = "";
                    <p><span style="color:firebrick">No update done. Product not found. Return to search for another product</span> <a href="ProductSearch.cshtml">  Back to Product Search</a></p>
                }
                else
                {
                    <p><span style="color:green">@productname updated.</span></p>
                }
            }
            catch (Exception ex)
            {


                <p><span style="color:firebrick">@ex.Message</span></p>
            }


        }

    }
}
else //for IsPost
{
    //if this page is being shown for the "first time"
    //the page accesses the database for the current record
    //to display to the user
    queryProducts = db.QuerySingle(queryStatement, pid);

    //moving the current record data to the form controls
    //NEVER code to the data supplied
    //the Products table on the Northwind database does not
    //  have a record where the nullable fields are actual null
    //the following code takes into account fields which actually
    //  maybe null
    productid = queryProducts.ProductID.ToString();
    productname = queryProducts.ProductName;
    supplierid = queryProducts.SupplierID == null ? "0" : queryProducts.SupplierID.ToString();
    categoryid = queryProducts.CategoryID == null ? "0" : queryProducts.CategoryID.ToString();
    quantityperunit = queryProducts.QuantityPerUnit;
    unitprice = queryProducts.UnitPrice == null ? "" : queryProducts.UnitPrice.ToString();
    unitsinstock = queryProducts.UnitsInStock == null ? "" : queryProducts.UnitsInStock.ToString();
    unitsonorder = queryProducts.UnitsOnOrder == null ? "" : queryProducts.UnitsOnOrder.ToString();
    reorderlevel = queryProducts.ReorderLevel == null ? "" : queryProducts.ReorderLevel.ToString();
    discontinued = queryProducts.Discontinued.ToString();//from sql 0/1
}
<div class="form-group">

    <form id="theForm" action="" method="post">
        <div class="col-sm-6 text-right">
            <label id="label1" for="ProductID">Product ID</label><br />
            <label id-="label1" for="ProductName">Product Name</label><br />
            <label id="label1" for="SupplierList">Supplier</label><br />
            <label id="label1" for="CategoryList">Category</label><br />
            <label id="label1" for="QuantityPerUnit">Quantity Per Unit</label><br />
            <label id="label1" for="UnitPrice">Unit Price</label><br />
            <label id="label1" for="UnitsInStock">Units In Stock</label><br />
            <label id="label1" for="UnitsOnOrder">Units On Order</label><br />
            <label id="label1" for="ReorderLevel">ReorderLevel</label><br />
            <label id="label1" for="Discontinued">Discontinued</label><br />
        </div>
        <div class="col-sm-6">
            <input type="text" name="ProductID" value="@productid" readonly /><br />
            <input type="text" name="ProductName" value="@productname" /><br />
            <select name="SupplierList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in querySuppliers)
                {
                    if (acollectionrow.SupplierID.ToString() == supplierid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <select name="CategoryList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in queryCategories)
                {
                    if (acollectionrow.CategoryID.ToString() == categoryid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select><br />
            <input type="text" name="QuantityPerUnit" value="@quantityperunit" /><br />
            <input type="number" name="UnitPrice" value="@unitprice" min="0.00" step="0.01" /><br />
            <input type="number" name="UnitsInStock" value="@unitsinstock" min="0" step="1" /><br />
            <input type="number" name="UnitsOnOrder" value="@unitsonorder" min="0" step="1" /><br />
            <input type="number" name="ReorderLevel" value="@reorderlevel" min="0" step="1" /><br />
            @if (discontinued.Equals("True") || (discontinued == "1"))
            {
                <input type="checkbox" name="Discontinued" checked value="1" /><br /><br />
            }
            else
            {
                <input type="checkbox" name="Discontinued" value="0" /><br /><br />
            }
        </div>
        <div class="row text-center">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary" value="update">Update</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" value="delete" formnovalidate>Delete</button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" value="cancel" formnovalidate>Cancel</button>
        </div>
        <script type="text/javascript">
            document.getElementById("theDelete").onclick = ConfirmDelete;
            function ConfirmDelete()
            {
                return confirm("Are you sure you want discontinue @productname?");
            }
        </script>
    </form>
</div>
